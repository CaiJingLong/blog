<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Caddy on CaiJingLong</title>
    <link>https://kikt.top/categories/caddy/</link>
    <description>Recent content in Caddy on CaiJingLong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sat, 05 Jan 2019 11:13:08 +0800</lastBuildDate><atom:link href="https://kikt.top/categories/caddy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Caddy 初探</title>
      <link>https://kikt.top/posts/server/caddy/caddy-first/</link>
      <pubDate>Sat, 05 Jan 2019 11:13:08 +0800</pubDate>
      
      <guid>https://kikt.top/posts/server/caddy/caddy-first/</guid>
      <description>
        
          
            &lt;p&gt;caddy 是使用 go 语言开发的一个 server 服务器&lt;/p&gt;
&lt;p&gt;相对于 nginx 来说,这个部署更简单,配置起来也很简单,很适合搭私人站点使用,而且相比于 nginx 来说,这个只有单文件,很适合小白使用&lt;/p&gt;
&lt;p&gt;而且,这东西最大的优点是,可以通过简单的配置来支持 https,而无需操心证书,另外还支持 http2 协议&lt;/p&gt;
&lt;p&gt;这里有一份
&lt;a href=&#34;https://dengxiaolong.com/caddy/zh/&#34; &gt;中文文档&lt;/a&gt;
,请注意查收&lt;/p&gt;
&lt;h2 id=&#34;入手&#34;&gt;入手&lt;/h2&gt;
&lt;p&gt;以 mac os 为例 我只需要 &lt;code&gt;brew install caddy&lt;/code&gt; 然后, 运行 &lt;code&gt;caddy&lt;/code&gt;,这样就完成了最简单的部署过程...&lt;/p&gt;
&lt;p&gt;当然这是因为有默认配置的关系,整个项目是单文件的,就只有一个 caddy 文件&lt;/p&gt;
&lt;p&gt;其他系统的参考
&lt;a href=&#34;https://caddyserver.com/&#34; &gt;官网&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;运行结果如下

&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://dev.azure.com/cjlspy/844861b8-ee45-48a3-b430-b974684baaaa/_apis/git/repositories/bf4da1c1-1cfa-4f54-8a75-745cce2b737c/items?versionDescriptor%5Bversion%5D=master&amp;amp;path=%2F20190105112709.png&amp;amp;versionDescriptor%5BversionOptions%5D=0&amp;amp;versionDescriptor%5BversionType%5D=0&amp;amp;resolveLfs=true&amp;amp;%24format=octetStream&amp;amp;api-version=5.0&#34; alt=&#34;图片&#34;  crossorigin/&gt;
&lt;/p&gt;

默认是 2015 端口,可能是代表这个项目是 2015 年创建/发布的?&lt;/p&gt;
&lt;p&gt;然后打开 
&lt;a href=&#34;http://localhost:2015/&#34; &gt;http://localhost:2015/&lt;/a&gt;
 就可以看到你的网页了,当然这里因为有默认的原因,你看到的也许是 404,或是其他的什么&lt;/p&gt;
&lt;h2 id=&#34;自定义配置&#34;&gt;自定义配置&lt;/h2&gt;
&lt;p&gt;caddy 支持命令行的一些简单配置和配置文件的复杂配置&lt;/p&gt;
&lt;h3 id=&#34;命令行&#34;&gt;命令行&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;caddy -h&lt;/code&gt; 可以看到最新最全的命令行参数列表

&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://dev.azure.com/cjlspy/844861b8-ee45-48a3-b430-b974684baaaa/_apis/git/repositories/bf4da1c1-1cfa-4f54-8a75-745cce2b737c/items?versionDescriptor%5Bversion%5D=master&amp;amp;path=%2F20190105113344.png&amp;amp;versionDescriptor%5BversionOptions%5D=0&amp;amp;versionDescriptor%5BversionType%5D=0&amp;amp;resolveLfs=true&amp;amp;%24format=octetStream&amp;amp;api-version=5.0&#34; alt=&#34;图片&#34;  crossorigin/&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;这里说命令行运行简单命令的意思并不是支持不全,而是有一些复杂的情况,如果用命令行来做调错比较麻烦&lt;/p&gt;
&lt;p&gt;比如 -agree 同意 CA 的协议&lt;/p&gt;
&lt;p&gt;-ca XXX 获取指定 host 的 ca 证书&lt;/p&gt;
&lt;p&gt;一般情况下比较有用的就是&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-conf string&lt;/code&gt; 使用配置文件&lt;/p&gt;
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
