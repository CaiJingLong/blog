<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>server on CaiJingLong</title>
    <link>https://kikt.top/categories/server/</link>
    <description>Recent content in server on CaiJingLong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sat, 06 Jun 2020 14:01:14 +0800</lastBuildDate><atom:link href="https://kikt.top/categories/server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用 Caddy 解决 web 开发中本地跨域的问题</title>
      <link>https://kikt.top/posts/server/caddy/cros_for_local_dev/</link>
      <pubDate>Sat, 06 Jun 2020 14:01:14 +0800</pubDate>
      
      <guid>https://kikt.top/posts/server/caddy/cros_for_local_dev/</guid>
      <description>
        
          
            最近在尝试 flutter web, 会遇到一个问题, app 没问题, 然而同样的代码在 web 里就不好使了, 主要就是跨域的问题
搜了一下各种方案都是 nginx 的, 但是我抄过来发现不好使..
所以自己摸索一下解决方案
这个方案只适合于本地开发调试, 真实部署时只有两种方案
让服务器 api 允许跨域 部署到和服务器同一个域名,同一个端口下 另: 目前个人还是觉得 flutter web 不适合商用, 比较适合的场景是, 没有 android/ios 插件的项目中做远端展示使用,比如内部就不用分发 apk/ipa 了, 那两个东西打包太慢了, 这时候直接用 flutter web 就比较靠谱了
下载 Caddy 官网: 找最新版本下载
因为这货是 GO 语言开发的, 所以只有单文件就可以部署了
我是 mac os, 我用的是 brew 安装的, brew install caddy
安装好了以后查看一下版本, 一定要是 2.0+ 版本的
1$ caddy version 2v2.0.0 h1:pQSaIJGFluFvu8KDGDODV8u4/QRED/OPyIR+MWYYse8= 注意: 因为这东西 2.0 版本有大更改, 配置文件和 1.x 并不通用, 我这里使用的是 2.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Caddy 初探</title>
      <link>https://kikt.top/posts/server/caddy/caddy-first/</link>
      <pubDate>Sat, 05 Jan 2019 11:13:08 +0800</pubDate>
      
      <guid>https://kikt.top/posts/server/caddy/caddy-first/</guid>
      <description>
        
          
            caddy 是使用 go 语言开发的一个 server 服务器
相对于 nginx 来说,这个部署更简单,配置起来也很简单,很适合搭私人站点使用,而且相比于 nginx 来说,这个只有单文件,很适合小白使用
而且,这东西最大的优点是,可以通过简单的配置来支持 https,而无需操心证书,另外还支持 http2 协议
这里有一份,请注意查收
入手 以 mac os 为例 我只需要 brew install caddy 然后, 运行 caddy,这样就完成了最简单的部署过程...
当然这是因为有默认配置的关系,整个项目是单文件的,就只有一个 caddy 文件
其他系统的参考
运行结果如下 默认是 2015 端口,可能是代表这个项目是 2015 年创建/发布的?
然后打开 就可以看到你的网页了,当然这里因为有默认的原因,你看到的也许是 404,或是其他的什么
自定义配置 caddy 支持命令行的一些简单配置和配置文件的复杂配置
命令行 使用caddy -h 可以看到最新最全的命令行参数列表 这里说命令行运行简单命令的意思并不是支持不全,而是有一些复杂的情况,如果用命令行来做调错比较麻烦
比如 -agree 同意 CA 的协议
-ca XXX 获取指定 host 的 ca 证书
一般情况下比较有用的就是
-conf string 使用配置文件
-email string ca 的 email
          
          
        
      </description>
    </item>
    
    <item>
      <title>spring boot 渲染md格式模板</title>
      <link>https://kikt.top/posts/server/java/spring-boot/template/</link>
      <pubDate>Sun, 27 Aug 2017 10:45:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/server/java/spring-boot/template/</guid>
      <description>
        
          
            写在前面 主要技术点:使用 thymeleaf+flexmark 渲染模板渲染 markdown 文件 ,highlight 渲染代码高亮 thymeleaf 模板负责渲染页面 flexmark 是 java 语言编写,负责将数据库中的 markdown 语法文本转为 html 文本 highlight 负责渲染 code 部分的代码,是一款 js+css 库
步骤 首先定义一个 controller 和 requstmapping
1package com.kikt.web.ctl.blog; 2 3import com.kikt.service.markdown.MarkdownService; 4import com.sun.org.apache.xpath.internal.operations.Mod; 5import org.springframework.beans.factory.annotation.Autowired; 6import org.springframework.stereotype.Controller; 7import org.springframework.ui.Model; 8import org.springframework.web.bind.annotation.RequestMapping; 9import org.springframework.web.bind.annotation.RequestMethod; 10import org.springframework.web.bind.annotation.RequestParam; 11import org.springframework.web.bind.annotation.RequestPart; 12 13/** 14 * Created by cai on 2017/8/25. 15 */ 16@Controller 17@RequestMapping(&amp;#34;/md&amp;#34;) 18public class MarkdownCtl { 19 20 @Autowired 21 private MarkdownService service; 22 23 @RequestMapping(value = &amp;#34;/parse&amp;#34;, method = RequestMethod.
          
          
        
      </description>
    </item>
    
    <item>
      <title>spring boot 扫码登录 后端实现</title>
      <link>https://kikt.top/posts/server/java/spring-boot/scan-login/</link>
      <pubDate>Fri, 25 Aug 2017 11:42:26 +0800</pubDate>
      
      <guid>https://kikt.top/posts/server/java/spring-boot/scan-login/</guid>
      <description>
        
          
            前言 在业内，扫码登陆不是什么新技术了，我这里主要是想自己实现一下这个功能，用的是简单实现，提供的只是思路 具体可以参考网上的其他文章 开发环境 mac+idea+paw+chrome+mysql 开发语言:java+kotlin mac:我的开发系统 idea:开发工具 paw:http调试工具 插一句 开发语言使用kotlin是有原因,kotlin是构建在jvm上的,而且有很多很方便的语法糖,敲代码速度很快 启动项目 首先配置一个 spring boot 的项目,这里使用 maven 构建的方案,因为我这里使用 gradle 构建总是会出现各种奇怪的问题
pom.xml
1&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; 2&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; 3 xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; 4 &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; 5 6 &amp;lt;groupId&amp;gt;com.kikt&amp;lt;/groupId&amp;gt; 7 &amp;lt;artifactId&amp;gt;myapp&amp;lt;/artifactId&amp;gt; 8 &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; 9 &amp;lt;!--&amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;--&amp;gt; 10 &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt; 11 12 &amp;lt;name&amp;gt;myapp&amp;lt;/name&amp;gt; 13 &amp;lt;description&amp;gt;MyApp&amp;lt;/description&amp;gt; 14 15 &amp;lt;parent&amp;gt; 16 &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; 17 &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; 18 &amp;lt;version&amp;gt;1.5.4.RELEASE&amp;lt;/version&amp;gt; 19 &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; 20 &amp;lt;/parent&amp;gt; 21 22 &amp;lt;properties&amp;gt; 23 &amp;lt;project.
          
          
        
      </description>
    </item>
    
    <item>
      <title>spring boot jdbctemplate mysql emoji 编码错误的问题</title>
      <link>https://kikt.top/posts/server/java/spring-boot/encoding-error/</link>
      <pubDate>Wed, 23 Aug 2017 11:42:26 +0800</pubDate>
      
      <guid>https://kikt.top/posts/server/java/spring-boot/encoding-error/</guid>
      <description>
        
          
            前言 为啥标题这么长呢? 因为确实关联到了这些问题 最近买了个阿里云的打折主机,打算主机布个简易的服务器,顺便熟悉下 springboot 的一些知识, 数据库打算直接用简单 jdbctemplate 但是不巧 在提交上传的时候有中文,引起了乱码问题
乱码问题 根据我多年的经验,乱码都是编码问题,baidu 了下
修改 springboot.properties
1spring.datasource.url = jdbc:mysql://127.0.0.1:3306/app?autoReconnect=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8 果然得到了解决
emoji 报错 后来上传的内容中有 emoji 表情,报错信息UncategorizedSQLException 原因是 utf8 不支持长度为 4 的编码
数据库 1create table blog_content 2( 3 `_id` int not null auto_increment comment &amp;#39;id 主键&amp;#39; 4 primary key, 5 title varchar(50) default &amp;#39;没有标题&amp;#39; not null comment &amp;#39;标题&amp;#39;, 6 content varchar(1000) null, 7 tag varchar(30) null comment &amp;#39;标签&amp;#39;, 8 insert_time timestamp default CURRENT_TIMESTAMP not null, 9 update_time timestamp default CURRENT_TIMESTAMP not null comment &amp;#39;更新时间&amp;#39;, 10 author_uid int not null 11) 12 comment &amp;#39;博客内容&amp;#39; 13 ENGINE=InnoDB DEFAULT charset utf8mb4 collate utf8mb4_unicode_ci; 14; 1INSERT INTO blog_content (content, tag, author_uid) VALUES (&amp;#39;内容👌&amp;#39;,&amp;#39;1,2&amp;#39;,1); 解决过程 数据库相关 根据网上的说法,修改数据库,修改表,修改表字段为 utf8mb4
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
