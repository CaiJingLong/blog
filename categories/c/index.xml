<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c on CaiJingLong</title>
    <link>https://kikt.top/categories/c/</link>
    <description>Recent content in c on CaiJingLong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 24 Apr 2023 08:23:52 +0800</lastBuildDate><atom:link href="https://kikt.top/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>c/c&#43;&#43; 项目基础</title>
      <link>https://kikt.top/posts/c/base/</link>
      <pubDate>Mon, 24 Apr 2023 08:23:52 +0800</pubDate>
      
      <guid>https://kikt.top/posts/c/base/</guid>
      <description>
        
          
            c/c++ 可以说是现代软件的基石，类库繁多，构建工具也很多。
在介绍构建工具前，我打算梳理一下 c/c++ 体系的一些基本概念。
1. 编译器 编译器的目的是编译源代码，生成可执行文件或类库文件。
典型的编译器组成部分如下：
前端 优化器 后端 嗯？什么，前端不是写 js 的吗？怎么编译器也有前端了？ 请听我娓娓道来
1.1 前端 编译器的前端不同于软件开发中的前端，它的主要任务是词法分析、语法分析和语义分析。
词法分析的任务是将源代码分割成一个个的词法单元，比如 int、main、(、)、{、}、;、return、0、;。
语法分析的任务是将词法单元组合成语法单元，比如 int main() { return 0; }。
语义分析的任务是检查语法单元是否符合语法规则，比如 int main() { return 0; } 是合法的，而 int main() { return 0 } 是不合法的。
一般来说，编译器的前端会生成一棵语法树（AST），AST 这个词就很眼熟了，经常在各种演讲炫耀中听到，全称是抽象语法树（Abstract Syntax Tree）。 咱们听到 react/flutter 中的摇树优化（tree shaking）就是摇这个玩意。
1.2 优化器 优化器在分类时其实属于后端，但是现在通常会单独提出来作为一部分。
优化器的任务是对语法树进行优化。因为编译的本质是将源码转为二进制，所以优化器的优化目标是二进制代码，而不是源码。
它可以做一些显而易见的事，比如将 int a = 1 + 2; 优化成 int a = 3;。这样可以减少运行时的执行步骤。 当然，现代的 ide 会提示你合并，但是那和本文无关。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
