<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on CaiJingLong</title>
    <link>https://kikt.top/categories/android/</link>
    <description>Recent content in android on CaiJingLong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Fri, 14 Aug 2020 20:45:00 +0800</lastBuildDate><atom:link href="https://kikt.top/categories/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>编译 go 源码为 android 动态库(so)</title>
      <link>https://kikt.top/posts/go/compile-for-android/</link>
      <pubDate>Fri, 14 Aug 2020 20:45:00 +0800</pubDate>
      
      <guid>https://kikt.top/posts/go/compile-for-android/</guid>
      <description>
        
          
            golang跨平台, 性能强, 周边也算丰富
一直有一个想法, 把这东西写的代码编译成各个平台的库, 未来在 flutter 里用
开发环境和工具 MacOS(其他的暂时不考虑) Go Go 1.14.6, 版本太低可能不能编译成 android 的 Goland , 咱现在是正版用户, 用开源项目申请的All products License , 你也可以根据自己的情况选择别的 IDE 或使用文本编辑器(vscode 也不错) Android Android Studio Cmake Android SDK Android NDK Go 部分 go 源码 add_library.go
1package main 2 3import &amp;#34;C&amp;#34; 4 5//export add 6func add(x, y int) int { 7	return x + y 8} 9 10//export remove_int 11func remove_int(x, y int) int { 12	return x - y 13} 14 15func main() { 16} 这里有几点要注意
          
          
        
      </description>
    </item>
    
    <item>
      <title>Flutter 插件开发之引入aar到安卓部分 并使用本地maven</title>
      <link>https://kikt.top/posts/flutter/plugin/flutter-sdk-import-aar/</link>
      <pubDate>Mon, 30 Mar 2020 14:14:39 +0800</pubDate>
      
      <guid>https://kikt.top/posts/flutter/plugin/flutter-sdk-import-aar/</guid>
      <description>
        
          
            本篇主题: 在 flutter 插件中引入 aar
本篇只包含 android 部分, iOS 的 framework 直接在 podspec 中引入就可以了,所以本篇略过不表
做过安卓开发的朋友可能知道, aar 文件如果作为本地文件直接引入 library, 然后 app 引用 library 是会报找不到aar的, 需要在 app 中使用 flatDir 进行引入, 这种方式的缺点在于, 你必须在每个项目去配置, 很有侵入性
熟悉 flutter 插件开发的朋友都知道,在我们开发 flutter 插件时, 插件是以 library module 的形式引入到项目中的
这时如果 sdk 方对于安卓只提供了 aar, 在这种大前提下,我们有如下几种方法:
使用 maven 公开服, 比如 jcenter, 或其他的 maven 仓库 使用本地 maven 仓库 本篇就使用这种本地 maven 仓库的方案来做
完成本地 maven 的步骤 创建插件项目 第一步肯定是创建一个 flutter 插件
1flutter create -t plugin example_for_flutter_plugin_local_maven 置入 aar 我这里用蒲公英的的 aar 举例:
          
          
        
      </description>
    </item>
    
    <item>
      <title>Flutter 1.12后 上传aar至maven私服</title>
      <link>https://kikt.top/posts/flutter/exists/upload-aar-to-maven/</link>
      <pubDate>Tue, 04 Feb 2020 18:23:24 +0800</pubDate>
      
      <guid>https://kikt.top/posts/flutter/exists/upload-aar-to-maven/</guid>
      <description>
        
          
            前言 本篇写一个将 flutter 打包为 aar 置入已有项目的方案
与不同的是: 本篇使用新版本的 flutter 环境, 使用 build aar 命令构建 aar,并上传至 maven 私服
开发环境 1$ flutter doctor -v 2[✓] Flutter (Channel stable, v1.12.13+hotfix.7, on Mac OS X 10.15 19A602, locale zh-Hans-CN) 3 • Flutter version 1.12.13+hotfix.7 at /Users/caijinglong/Library/Flutter/flutter_dev 4 • Framework revision 9f5ff2306b (9 天前), 2020-01-26 22:38:26 -0800 5 • Engine revision a67792536c 6 • Dart version 2.7.0 准备步骤 创建宿主工程 这个是模拟你本来的项目
作为原生开发者自行使用 Android Studio 创建即可
一个标准的 android 项目, 除了 gradle 版本使用 6.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Android 记录在macOS上使用 NDK20 编译ffmpeg4.2.2的过程</title>
      <link>https://kikt.top/posts/android/ffmpeg/compile-with-ndk20/</link>
      <pubDate>Tue, 07 Jan 2020 11:50:07 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/ffmpeg/compile-with-ndk20/</guid>
      <description>
        
          
            前言 ijkplayer 的 ffmpeg 是旧版本的, ndk 也是旧的, 程序员爱折腾, 所以想用最新的 ndk 编译最新的 ffmpeg, 当前就是 ndk20+ffmpeg4.2.2 了
第一步自然是搜索有没有现成的, 运气不错, 找到了大佬的示例
本篇参考了 的内容, 但因为我是 macOS, 所以进行了一些修改 包括有的东西设置后发现没生效, 在实际打包的时候会报类似下面的这种错误
1ld: warning: building for macOS, but linking in object file (libswresample/libswresample.a(resample.o)) built for free standing 所以我根据实际的报错内容进行了修改
编译脚本 这里只需要修改你的 NDK 为你本地的 NDK 目录即可
最新的代码在这里: gist.github.com 需要自备梯子
1#!/bin/bash 2 3NDK=/Volumes/Evo512/sdk/android-ndk-r20 4TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/darwin-x86_64 5API=21 6 7function build_android 8{ 9echo &amp;#34;Compiling FFmpeg for $CPU&amp;#34; 10./configure \ 11 --prefix=$PREFIX \ 12 --libdir=$LIB_DIR \ 13 --enable-shared \ 14 --disable-static \ 15 --enable-jni \ 16 --disable-doc \ 17 --disable-symver \ 18 --disable-programs \ 19 --target-os=android \ 20 --arch=$ARCH \ 21 --cpu=$CPU \ 22 --cc=$CC \ 23 --cxx=$CXX \ 24 --enable-cross-compile \ 25 --sysroot=$SYSROOT \ 26 --extra-cflags=&amp;#34;-Os -fpic $OPTIMIZE_CFLAGS&amp;#34; \ 27 --extra-ldflags=&amp;#34;$ADDI_LDFLAGS&amp;#34; \ 28 --disable-asm \ 29 $COMMON_FF_CFG_FLAGS 30make clean 31make -j8 32make install 33echo &amp;#34;The Compilation of FFmpeg for $CPU is completed&amp;#34; 34} 35 36# # armv8-a 37# source &amp;#34;config-env.
          
          
        
      </description>
    </item>
    
    <item>
      <title>把flutter项目作为aar添加到已有的Android工程上</title>
      <link>https://kikt.top/posts/flutter/exists/android-as-aar-to-maven/</link>
      <pubDate>Fri, 14 Jun 2019 09:06:24 +0800</pubDate>
      
      <guid>https://kikt.top/posts/flutter/exists/android-as-aar-to-maven/</guid>
      <description>
        
          
            对于已有工程想要尝鲜 Flutter, 很多公司给出了最佳实践方案, android 中是使用 aar 加入项目中, 这样原生开发对于 flutter 环境就没有要求了, 只要 flutter 打包后上传 maven 即可, 但是这部分的过程坑很多, 后面我会再补充这种方案
我也摸索了一个实践方案, 将所有项目的 aar 由 flutter 方打包 aar 后将 aar 置入某一个固定位置 ,并置入一个 git 库管理, 然后 android 原生方直接 pull 后引入项目即可
高能预警: 本篇会结合 flutter, android, aar, gradle, maven, docker 的知识来完成所有的步骤
并不是每一个都会详细说明, 如果有不明白的可以在 的本文下面留言, 我会更新文章或给予解答, 其他渠道的可能不会有时间看
开发环境 本人设备环境 MacOS 10.13.6 (17G65)
flutter: Flutter 1.5.4-hotfix.2 • channel stable
12019-10-25 更新说明: 这篇文章因为发布时效的原因, 当时还没有 `$ flutter build aar` 这个命令 2所以本人并没有实测两个东西的优劣性 预计需要的环境 1xcode 2android sdk 3gradle 4android studio 5flutter sdk 6docker # 这个 这些环境我默认你都有, 没有的话本篇不讲
          
          
        
      </description>
    </item>
    
    <item>
      <title>Android Q 隐私篇(5) - 相机/网络</title>
      <link>https://kikt.top/posts/android/android-q/privacy/android-q-privacy-5/</link>
      <pubDate>Fri, 24 May 2019 15:00:09 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-q/privacy/android-q-privacy-5/</guid>
      <description>
        
          
            如下几个改动:
相机 这个修改会影响所有的安装在 androidQ 上的应用, 不论你的 targetVersion 是多少
从前,即使没有 Camera 的权限, 也可以访问相机设备的元数据, 现在不行了
wifi 应用不能动 wifi 开关了, 现在只有通过设置来更改
wifi 配置 现在必须有设备管理器的权限才能修改 wifi 配置
ACCESS_FINE_LOCATION 带来的影响 如果没有ACCESS_FINE_LOCATION这个权限, 则 wifi,蓝牙会有一堆不能访问的 api
或者看下面
Telephony
getCellLocation() getAllCellInfo() requestNetworkScan() requestCellInfoUpdate() getAvailableNetworks() getServiceStateForSubscriber getServiceState() requestNetworkScan() onResults() onCellLocationChanged() onCellInfoChanged() onServiceStateChanged() Wi-Fi
startScan() getScanResults() getConnectionInfo() getConfiguredNetworks() Bluetooth
startDiscovery() startLeScan() LeScanCallback() 后记 以上
          
          
        
      </description>
    </item>
    
    <item>
      <title>Android Q 隐私篇(4) - 唯一标识符, 剪切板数据</title>
      <link>https://kikt.top/posts/android/android-q/privacy/android-q-privacy-4/</link>
      <pubDate>Fri, 24 May 2019 11:49:11 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-q/privacy/android-q-privacy-4/</guid>
      <description>
        
          
            第四篇,
唯一识别码的前世 在开发中, 总有人会提出各种设备&amp;quot;唯一标识符&amp;quot;的概念,以便于定位用户的唯一性, 或对于用户行为进行分析
很遗憾, 通过多年的探索, 目前没有任何一种特别准确, 一定能保证唯一的方案
包括但不仅限于以下方案
设备序列号 IMEI imsi mac 地址(wifi 模块)
如以下代码:
1package top.kikit.uniqueidprivacy 2 3import android.Manifest 4import android.annotation.SuppressLint 5import android.content.Context 6import android.os.Bundle 7import android.telephony.TelephonyManager 8import android.util.Log 9import androidx.appcompat.app.AppCompatActivity 10import com.tbruyelle.rxpermissions2.RxPermissions 11 12class MainActivity : AppCompatActivity() { 13 private val TAG = &amp;#34;MainActivity&amp;#34;; 14 15 private val rxPermissions = RxPermissions(this) 16 17 @SuppressLint(&amp;#34;CheckResult&amp;#34;) 18 override fun onCreate(savedInstanceState: Bundle?) { 19 super.onCreate(savedInstanceState) 20 setContentView(R.layout.activity_main) 21 22 23 val mTelephonyMgr = getSystemService(Context.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Android Q 隐私篇(3) - 限制后台活动</title>
      <link>https://kikt.top/posts/android/android-q/privacy/android-q-privacy-3/</link>
      <pubDate>Tue, 21 May 2019 09:49:25 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-q/privacy/android-q-privacy-3/</guid>
      <description>
        
          
            官方链接: 后台开启界面 这个限制主要限制的是: 当你的应用没有 Activity 在前台时, 后台应用无法主动开启界面
流氓应用是可以这么干的, 只是大部分应用还算有节操, 没有这么做而已
我自己遇到的除了我写的 Demo 以外,只有微信发生过这样的情况,还有一些其他应用是代码疏漏造成的
作用范围 只要你的 app 运行在 androidQ 的设备上, 就不行,哪怕你的 targetVersion 是 28 也一样
微信 微信也仅仅是在你登录以前登录过的电脑端时, 在你点击电脑端的确认后,才会在手机端弹出手动确认的弹框, 这一步原则上来讲也是客户自己的行为, 所以没有太大问题, 当然以后理论上就做不到了
代码疏漏 一些应用的启动页, 比如设定了一个 Handler 的倒计时, 在 3 秒后关闭启动页,然后开启主页面
然后,用户在启动页点了 home 键/back 键,过 3 秒后主页面依然出来了
很遗憾,以后不行了 😁
迁移需要修改的代码 无
一个简单的示例代码 1class MainActivity : AppCompatActivity() { 2 3 override fun onCreate(savedInstanceState: Bundle?) { 4 super.onCreate(savedInstanceState) 5 setContentView(R.layout.activity_main) 6 7 Handler().postDelayed({ 8 startActivity(Intent(this, this.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Android Q 隐私篇(2) - 后台定位权限</title>
      <link>https://kikt.top/posts/android/android-q/privacy/android-q-privacy-2/</link>
      <pubDate>Tue, 21 May 2019 09:14:28 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-q/privacy/android-q-privacy-2/</guid>
      <description>
        
          
            本篇是系列第二篇, 主要分析下 android Q 下的后台定位权限 , 有能力的朋友可以自己阅读,并不难
定位权限 在从前的 android 中,定位权限不分前后台,只有两个
1&amp;lt;uses-permission android:name=&amp;#34;android.permission.ACCESS_COARSE_LOCATION&amp;#34;/&amp;gt; 2&amp;lt;uses-permission android:name=&amp;#34;android.permission.ACCESS_FINE_LOCATION&amp;#34;/&amp;gt; 分别代表大致位置和精确位置, 一般来说在使用时定位权限都是一起要或者都不要的, 而且这两个作为同一个组,一般都是一起申请,一次授权
一般来说大部分人都是使用高德/百度地图作为定位 sdk 使用, 很显然这两个货申请一般也是都一起申请的
androidQ 的权限 androidQ 中会添加一个新的权限
1 &amp;lt;uses-permission android:name=&amp;#34;android.permission.ACCESS_BACKGROUND_LOCATION&amp;#34; /&amp;gt; 这个就是对应的后台权限, 和以前的分类方式不同,以前是精确度,这个是前后台
按照官方说明:
targetVersion: androidQ 或以上 如果 targetVersion 是 androidQ+, 则这个权限不会自动添加, 使用者需要自己添加,有就是有,没有就没有 如果 targetVersion 是 api 28(android 9.0)以下 如果你有以前版本的定位权限,则系统会在安装时帮你添加后台的权限(升级 androidOS 版本时不明) 在动态权限申请时,如果你申请的权限有以前的定位权限之一, 则会自动帮你在申请的权限里加上这个后台的 请求后台权限 上来是一段废话... 简单解释, 你需要后台权限吗?
不需要 需要 这个不是我们自己能定的, 以国内来看, 接 sdk (推送,定位,分享...)就要, 不接也要
如果不需要 请参考
Service 中声明一个前台定位的 type 类型
          
          
        
      </description>
    </item>
    
    <item>
      <title>Android Q 隐私篇(1) - 外部储存</title>
      <link>https://kikt.top/posts/android/android-q/privacy/android-q-privacy-1/</link>
      <pubDate>Mon, 20 May 2019 09:43:48 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-q/privacy/android-q-privacy-1/</guid>
      <description>
        
          
            一年一度的 googleIO 开完以后,不出意外的 Android10.0 系统(AndroidQ)出来了
隐私配置又㕛叒叕更新了..
连接地址: 这个地址可能在来年就变成 android 11 的了, 所以仅保证在2019 年 05 月 20 日以及之后的一段时间内有效
主要包含以下五大项目
对于大部分应用来说,储存方式的更新会有所影响, 其他的可能都是 SDK 要做的事情,和普通开发者关系不大
在适配新的系统前就和从前一样,暂时不升级 targetVersion,把 targetVersion 设置为 28 以下就不会影响旧程序了,就如同以前运行时权限真的是坑到爆炸,但是暂时不适配也是可以的
但是未来无论如何都需要适配新系统,所以先来看看
本篇只说储存的方式和权限问题,其他暂时略过不表
检查迁移情况 有一个表格提供了如何检查和迁移的方案
开发环境 说一下开发环境
MacOS
Android Studio 3.4.0
android 9.0 设备一台
androidQ 虚拟机一台(官方的 Emulator)
更新 sdk 更新 sdk, 下载 androidQ 相关的 sdk/sdktools/模拟器
androidQ build.gradle 当前想尝试 androidQ 的话, 编译版本和目标版本号需要按如下方式设置, 今后的话可能是 29/30 之类的数字
1targetSdkVersion = &amp;#39;Q&amp;#39; 2compileSdkVersion = &amp;#39;android-Q&amp;#39; 外部储存 androidQ 下读写文件 权限和以前一样
          
          
        
      </description>
    </item>
    
    <item>
      <title>CameraX的使用</title>
      <link>https://kikt.top/posts/android/camera/camerax-usage/</link>
      <pubDate>Tue, 14 May 2019 13:44:59 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/camera/camerax-usage/</guid>
      <description>
        
          
            我在 googleIO 前查看演讲主题,看到了有一篇标题是关于 cameraX ,当时在 android 官网没有搜索到教程
在 flutter web 基本体验完毕后, 再去搜索果然从官网查看到了 cameraX 的相关介绍
介绍 CameraX 是 Jetpack 的一部分, 旨在帮助更好更简单的使用照相机
最低支持的 API 等级是 API 21(5.0)
开发环境 我当前的开发环境是
MacOS 10.13.6
Android Studio 3.4 小米 8 MIUI 10.3 稳定版 10.3.2.0(android 9.0)
最低支持 官方说明为 AndroidStudio 3.3 API 21+的设备
编码准备 新建项目 修改这两项
最低 21, 使用 androidX
添加依赖 在 app 级别的 build.gradle 中添加如下依赖
这个版本当前还是 alpha 版本,后续可能会升级为正式版, 可以查看
1dependencies { 2 def camerax_version = &amp;#34;1.0.0-alpha01&amp;#34; 3 implementation &amp;#34;androidx.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Migrating to AndroidX</title>
      <link>https://kikt.top/posts/flutter/migrate-android-x/</link>
      <pubDate>Wed, 06 Mar 2019 10:26:03 +0800</pubDate>
      
      <guid>https://kikt.top/posts/flutter/migrate-android-x/</guid>
      <description>
        
          
            无论在 android 开发中 还是 flutter 开发中,都会面临迁移 AndroidX 的问题
官方有一个说明,可以
下面是我总结的修改方式
迁移到 androidX 修改 andorid 目录下的 app/build.gradle 1android{ 2 compileSdkVersion 28 3} 使用了 gradle wrapper 如果 andorid 根目录下有这个文件夹/文件,则需要修改
根据官网说明,最好修改到 4.10.1 以上
gradle-wrapper.properties 文件
修改版本号位置,我使用的是当前的最新版 5.2.1,你可以根据你的情况修改
1distributionUrl=https\://services.gradle.org/distributions/gradle-5.2.1-all.zip 如果没有用这个,那么你需要修改的环境变量中的 gradle 版本,这个请自行百度/Google
修改 android 目录下的 build.gradle 根目录下的 build.gradle ,这个是目前的最新版
这个不是 gradle 的版本,你可以理解为与插件匹配,一般等于你的 android studio 的版本
1buildscript{ 2 dependencies { 3 classpath &amp;#39;com.android.tools.build:gradle:3.3.1&amp;#39; 4 } 5} 修改 android 目录下的 gradle.properties 如果没有,就添加这两行
1android.enableJetifier=true 2android.useAndroidX=true 最后 做完上面的应该就可以了,运行下项目,如果有别的问题欢迎留言
          
          
        
      </description>
    </item>
    
    <item>
      <title>在原 Android 工程的基础上构建一个flutter工程</title>
      <link>https://kikt.top/posts/flutter/exists/android/</link>
      <pubDate>Tue, 22 Jan 2019 07:50:31 +0800</pubDate>
      
      <guid>https://kikt.top/posts/flutter/exists/android/</guid>
      <description>
        
          
            在 flutter 开发的过程中不可能所有项目都是从零构建
换句话说不是所有项目都是 flutter 为主工程,然后 android/ios 的工程为副工程
大概率会遇到需要将 flutter 作为组件加入到原生项目中, 这种例子典型的就是阿里闲鱼,当然闲鱼团队的实力不是普通的小公司可以比的
所幸的是,flutter 团队提供了一个 用于帮助我们完成这个过程
创建一个 Android 工程 使用 Android Studio 创建一个新工程来模拟这个过程,会看这里的普遍都应该是 android 程序员出身,Hello World 工程是肯定会的,不会的话还是回炉加强一下吧
如果你已经有现有工程,肯定是有 VCS 管理的,放心大胆的走出第一步,大不了就删除当前分支嘛,然后你可以跳过这一步,直接看 flutter 的过程
创建 Flutter 这一步仅作为 官方 Android 部分的参考
我目前使用的是 1.0.0 的发布版
1Flutter 1.0.0 • channel dev • https://github.com/flutter/flutter.git 2Framework • revision 5391447fae (11 days ago) • 2018-11-29 19:41:26 -0800 3Engine • revision 7375a0f414 4Tools • Dart 2.1.0 (build 2.1.0-dev.9.4 f9ebf21297) wiki 后续可能会被修改,请查看最新的文档去解决
          
          
        
      </description>
    </item>
    
    <item>
      <title>android 引入ffmpeg</title>
      <link>https://kikt.top/posts/android/android-include-ffmpeg/</link>
      <pubDate>Mon, 14 Jan 2019 17:14:00 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-include-ffmpeg/</guid>
      <description>
        
          
            上篇介绍了如何 在 mac 系统下打包 ffmpeg 的 so
这篇介绍如何引入 so 到项目中
开发环境:
1macos 2android studio 3.2.1 3ndk: 15.2.4203891 新建一个工程 新建工程时,勾选 c++支持
将文件复制到项目内 需要复制的文件
.h 头文件 so文件 在 cpp 中新建一个文件夹include/ffmpeg 把 include 中的文件夹复制到 ffmpeg 下
在 main 下新建文件夹jniLibs,把 so 文件复制到其中 修改 CMakeList 完整的CMakeList.txt 如下
1# For more information about using CMake with Android Studio, read the 2# documentation: https://d.android.com/studio/projects/add-native-code.html 3 4# Sets the minimum version of CMake required to build the native library.
          
          
        
      </description>
    </item>
    
    <item>
      <title>ndk编译ffmpeg</title>
      <link>https://kikt.top/posts/android/android-ffmpeg-compile-so/</link>
      <pubDate>Mon, 14 Jan 2019 14:45:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-ffmpeg-compile-so/</guid>
      <description>
        
          
            最近在努力学习音视频相关东西,以备未来不时之需
在音视频处理领域有一个绕不过去的著名项目就是FFmpeg,这个项目基于 GPL 开源协议,
最新版本目前我在 mac 上无法编译,会报错
使用的总体环境如下:
1Macos: 10.13.6 (17G65) 2ffmpeg: 3.3.6 3ndk: 15.2.4203891 引用外部源码(尝试失败) 初次尝试的时候,希望可以通过 CMakeLists 中配置头文件和库的方式,直接引用,发现可能需要拷贝所有源代码到项目中,但这样需要 copy 的东西很多,对于真实的项目来说也许可行,但 demo 项目就太复杂了,而且不方便今后的使用
交叉编译 so 这里有一个坑,就是 ndk 版本不能太低,因为之前使用过 ijkplayer,那个项目要求 11d 还是 11e 的 ndk 版本,我这次想直接用这个 ndk 版本,过程中会报很多错误,具体原因没有深究
然后使用我 android sdk 中带的 ndk 版本果断成功
这个是我的 ndk 版本,截至当前最新版本应该是 18.X
版本号在 ndk 中查看 propertis 文件可以看见
另一个叫法是 android-ndk-r15c
1Pkg.Desc = Android NDK 2Pkg.Revision = 15.2.4203891 ffmpeg 版本:我开始是下载的最新版本 4.1 版 ,结果编译不通过,在 udp.c 中报错了,通过网络搜索到一个原因,ffmpeg 通过下载了一个 ffmpeg-3.3.6 解决
          
          
        
      </description>
    </item>
    
    <item>
      <title>android 依赖冲突</title>
      <link>https://kikt.top/posts/android/android-repo-confire/</link>
      <pubDate>Sun, 04 Mar 2018 17:14:00 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-repo-confire/</guid>
      <description>
        
          
            起因 在引入新的依赖后,有时你会报一些冲突的错误,尤其是 v4 v7 库的使用
有的时候能&amp;quot;自动&amp;quot;纠正,但是大部分时候不行
比如 A 库引用了 v7 26.x.x 的库, B 库使用了 v7 27.x.x 作为依赖
解决方案 gradle 打包的过程中,首先会加载所有 gradle 脚本到库内
然后才是运行的过程, 所以我们只需要在 app 级的build.gradle中增加如下代码即可
1rootProject.allprojects { // 闭包循环每个工程 2 3 subprojects { //每个工程子工程 4 project.configurations.all { //查找所有配置 5 resolutionStrategy.eachDependency { details -&amp;gt; //遍历所有依赖 6 if (details.requested.group == &amp;#39;com.android.support&amp;#39; 7 &amp;amp;&amp;amp; details.requested.name.contains(&amp;#39;appcompat-v7&amp;#39;)) { 8 details.useVersion &amp;#34;26.1.0&amp;#34; //将support包 v7替换为26.1.0 ,这里根据你自己的需要来改就可以了 9 } 10 } 11 } 12 } 13 14} 
          
          
        
      </description>
    </item>
    
    <item>
      <title>android 经典蓝牙编程 SPP</title>
      <link>https://kikt.top/posts/android/android-spp-bluetooth/</link>
      <pubDate>Sat, 08 Jul 2017 09:35:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-spp-bluetooth/</guid>
      <description>
        
          
            前言 最近有一些蓝牙的通信需要做,就研究了一下蓝牙连接相关
连接蓝牙电子秤 连接 pos 机打印 其中连接蓝牙电子秤是接收数据 pos 机打印是发送数据/接收数据
流程图 流程图画的相当不专业,请自行脑补 核心类 因为这次的电子秤不是 4.0 的设备,所以没有使用 BLE 的开发,而是经典蓝牙(SPP)的连接方式 BluetoothAdapter
全局变量
1protected BluetoothAdapter mAdapter; 获取的方法,在 API18 下的时候使用的方式和以上的不一样,其实差别不大
1if (SDK_INT &amp;lt; 18) { 2 adapter = BluetoothAdapter.getDefaultAdapter(); 3} else { 4 BluetoothManager bm = (BluetoothManager) getSystemService(BLUETOOTH_SERVICE); 5 adapter = bm.getAdapter(); 6} 蓝牙使用的是注册广播的方式来获取系统给我们的通知 核心有以下的几种,注册广播的方法自己去搜下吧
1 BluetoothDevice.ACTION_FOUND//找到设备 2 BluetoothDevice.ACTION_NAME_CHANGED//设备的名字 3 BluetoothAdapter.ACTION_DISCOVERY_FINISHED//扫描结束 4 BluetoothDevice.ACTION_PAIRING_REQUEST//配对请求的放弃 5 BluetoothAdapter.STATE_OFF//蓝牙关闭 6 BluetoothAdapter.STATE_ON//蓝牙开启 连接 一般这种连接应该是全局单例,考虑写在了 service 中
首先需要扫描所有的蓝牙连接,但是这里有个坑,就是如果你将广播注册在 onCreate 中和 onDestroy,你每次都需要接收系统的广播,如果出现同名或者别的原因,这里就会一直接收广播 所以这里需要动态的将广播注册与反注册 我这里使用的方案请参照流程图
          
          
        
      </description>
    </item>
    
    <item>
      <title>Android6.0百度地图导入UnsatisfiedLinkError的问题</title>
      <link>https://kikt.top/posts/android/baidu-map-error/</link>
      <pubDate>Tue, 07 Mar 2017 12:45:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/baidu-map-error/</guid>
      <description>
        
          
            前言 今天用 AS 写一个带有百度地图相关的项目时，发现了一个问题
提示
1 Error:Execution failed for task &amp;#39;:app:compileDebugNdk&amp;#39;. 2&amp;gt; Error: Your project contains C++ files but it is not using a supported native build system. 3Consider using CMake or ndk-build integration with the stable Android Gradle plugin: 4 https://developer.android.com/studio/projects/add-native-code.html 5or use the experimental plugin: 6 http://tools.android.com/tech-docs/new-build-system/gradle-experimental. 我就找原因，先点开了两个网页，发现一个是用 CMake 构建 ndk 的还一个是用 experimental 插件构件 ndk 项目的
这两个方式的共通点是都有 c 的源码，自己生成 so 文件，都不是我想要的
因为以前这么写没有问题，我在网上找相同的问题，大家都是说把 targetVersion 改成 23 以下就解决了，但是这不是我想要的，况且我这么用了也没解决问题，毕竟 targetVersion 迁移到 23+是大势所趋
          
          
        
      </description>
    </item>
    
    <item>
      <title>AIDL 安卓进程间通信/跨应用通信</title>
      <link>https://kikt.top/posts/android/android-aidl/</link>
      <pubDate>Tue, 06 Dec 2016 10:45:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-aidl/</guid>
      <description>
        
          
            前言 最近出去面试找工作，被人问到 AIDL，我就回答这个东西我用过，也大概理解，Android 的进程间通信语言嘛
人家不置可否，那我能咋着呢，毕竟没深入研究过，也没办法，咱只能回来奋发图强了
写在前面 我以前就看过的一个博客，里面原理代码什么都有，写的水平肯定比我高
首先字面解释 A=Android IDL=Interface definition language 意译就是 android 接口定义语言，马丹，完全看不明白 算了，就是 Android 官方给我们定义出来跨进程，甚至跨应用通信用的
开发平台 Android Studio 2.2+Android 手机一部
新建工程 这个就不说了，跳过 就是新建工程后再建一个 module 也是 android app，功能后面再说
aidl 语法 这里请去看我写在前面，里面比较详细，或者自行 baidu/google，我也了解的不多
代码示例 最关键的地方到了 其实就是新建一个 aidl 文件
1// IMyAidlInterface.aidl 2package com.kikt.aidl; 3 4// Declare any non-default types here with import statements 5 6interface IMyAidlInterface { 7 8 void test(int sum,int sum2); 9} 接着 make project，生成下 java 代码 找到生成的代码看下 我靠 好复杂，还是渣格式，这里格式化一下：
          
          
        
      </description>
    </item>
    
    <item>
      <title>Android Studio 简单的JunitTest</title>
      <link>https://kikt.top/posts/android/android-junit/</link>
      <pubDate>Sat, 22 Oct 2016 10:45:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-junit/</guid>
      <description>
        
          
            最近使用 AndroidStudio 的时候想要使用单元测试 因为有一些数据需要 Activity 的支持， 从网上找了一些教程，但自己使用时感觉不理想，发现都是一些业务逻辑的类，很少有直接针对 Activity 的单元测试 所以想自己写一个简单的 demo
开发环境 Android Studio 2.2
步骤 首先新建工程 然后会自动生成 MainActivity
MainActivity 代码如下
1public class MainActivity extends AppCompatActivity { 2 3 // Used to load the &amp;#39;native-lib&amp;#39; library on application startup. 4 static { 5 System.loadLibrary(&amp;#34;kikt-camera&amp;#34;); 6 } 7 8 @Override 9 protected void onCreate(Bundle savedInstanceState) { 10 super.onCreate(savedInstanceState); 11 setContentView(R.layout.activity_main); 12 13 // Example of a call to a native method 14 TextView tv = (TextView) findViewById(R.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Android Studio 2.2 ndk开发环境 gradle配置</title>
      <link>https://kikt.top/posts/android/android-studio-2-2-ndk-and-gradle-config/</link>
      <pubDate>Fri, 21 Oct 2016 10:45:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-studio-2-2-ndk-and-gradle-config/</guid>
      <description>
        
          
            AndroidStudio2.2 中 对于 ndk/jni 建议使用 cmake 进行编译 而对于纯粹的 android 程序员来说，cmake 不是经常接触的方案，我在遇到 jni 相关时也遇到了一些问题，这里抛砖引玉吧
开发环境 Android SDK/NDK Android Studio 2.2 友情提示：更新请科学上网
准备工作 其实 demo 永远是最好的老师 我们直接自己创建一个 Project 好在 AS 对于对于 ndk 的支持越来越友好 选中 c++支持，这样创建出来的 gradle 文件就会自动创建相关的，有助于我们学习
自动生成的核心文件 build.gradle MainActivity.java native-lib.cpp CMakelists.txt
MainActivity.java MainActivity.java
1 System.loadLibrary(&amp;#34;native-lib&amp;#34;); //加载native-lib库 2 ... 3 public native String stringFromJNI();//指向cpp文件中的方法 左边有一个箭头，这个点击可以直接跳到 cpp 文件中的方法
gradle project 级别的和传统没有差别 看 module 级的
1apply plugin: &amp;#39;com.android.application&amp;#39; 2 3android { 4 ... 5 externalNativeBuild { 6 cmake { 7 cppFlags &amp;#34;&amp;#34; 8 } 9 } 10 } 11 .
          
          
        
      </description>
    </item>
    
    <item>
      <title>Butterknife8.4.0的一些问题</title>
      <link>https://kikt.top/posts/android/butterknife8-1/</link>
      <pubDate>Sun, 18 Sep 2016 19:45:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/butterknife8-1/</guid>
      <description>
        
          
            写在前面： 在 github 上 butterknife 的 star 有 11000+ 为啥有这么多人用这个插件 两点： 1、自动化 2、有人更新和维护
GRADLE 根目录的 build.gradle 也就是 project 级
1buildscript { 2 repositories { 3 mavenCentral() 4 } 5 dependencies { 6 classpath &amp;#39;com.neenbedankt.gradle.plugins:android-apt:1.8&amp;#39; 7 } 8} module 级别
1apply plugin: &amp;#39;android-apt&amp;#39; 2 3android { 4 ... 5} 6 7dependencies { 8 compile &amp;#39;com.jakewharton:butterknife:8.4.0&amp;#39; 9 apt &amp;#39;com.jakewharton:butterknife-compiler:8.4.0&amp;#39; 10} 基本的注入我想大部分人都知道
ButterKnife.bind(this) 这里可以是 View，Activity 等等
还支持 Android annotations 的几个注解
1@Optional //可选 2@Nullable //可能为空 在 8.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Android剪切板的简单解析</title>
      <link>https://kikt.top/posts/android/android-clipboard-manager/</link>
      <pubDate>Sun, 18 Sep 2016 10:45:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-clipboard-manager/</guid>
      <description>
        
          
            其实 android 的剪切板使用不算复杂 而且一般的应用需求不会太复杂，只要简单的应用即可
一般都是点击事件时将某段文字复制到剪切板中
Android 中的剪切板是使用ClipboardManager来管理的 获取这个对象的方法是
1Context.getSystemService(Context.CLIPBOARD_SERVICE); 2cm = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE); 在 API11 后 使用的是
1android.content.ClipboardManager API11 前 使用的是
1android.text.ClipboardManager 前者的方法声明是
1public class ClipboardManager extends android.text.ClipboardManager 也就是说即使在 API11 后也可以使用旧的方法来获取和修改剪切板内的内容
CharSequence text = cm.getText();可以获取到剪切板内的内容 使用cm.setText(&amp;quot;复制到剪切板&amp;quot;);可以将内容复制到剪切板内
如果你的应用 minSDK 在 11 以上，可以直接用新的方法，毕竟老的已经过时了
使用如下的代码
1 cm = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE); 2 ClipData clipData = ClipData.newPlainText(&amp;#34;title&amp;#34;, &amp;#34;content23&amp;#34;); 3 cm.setPrimaryClip(clipData); 可以简单的达到效果
这个有一个对象ClipData
1package com.dn.clipbroaddemo; 2 3import android.content.ClipData; 4import android.content.ClipDescription; 5import android.content.ClipboardManager; 6import android.os.Bundle; 7import android.support.v7.app.AppCompatActivity; 8import android.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Retroift简单二次封装</title>
      <link>https://kikt.top/posts/android/retroift-simple-packaging/</link>
      <pubDate>Thu, 01 Sep 2016 10:45:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/retroift-simple-packaging/</guid>
      <description>
        
          
            retrofit 的简单二次封装 基于上次的后，可以对 retrofit 简单的二次封装
1public interface HttpURL { 2 String baseUrl = &amp;#34;http://127.0.0.1:32001/&amp;#34;; 3} 1public class RequestUtils { 2 3 private static OkHttpClient client; 4 private static Retrofit retrofit; 5 6 private RequestUtils() { 7 } 8 9 static { 10 client = new OkHttpClient() 11 .newBuilder() 12 .connectTimeout(8, TimeUnit.SECONDS) 13 .readTimeout(8, TimeUnit.SECONDS) 14 .writeTimeout(8, TimeUnit.SECONDS) 15 .addInterceptor(new HttpInterceptor()) 16 .build(); 17 18 retrofit = new Retrofit.Builder() 19 .baseUrl(HttpURL.baseUrl) 20 .
          
          
        
      </description>
    </item>
    
    <item>
      <title>Retroift初探</title>
      <link>https://kikt.top/posts/android/retroift-first-develop/</link>
      <pubDate>Wed, 31 Aug 2016 18:25:45 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/retroift-first-develop/</guid>
      <description>
        
          
            retrofit 初探 引用 maven 1&amp;lt;dependency&amp;gt; 2 &amp;lt;groupId&amp;gt;com.squareup.retrofit2&amp;lt;/groupId&amp;gt; 3 &amp;lt;artifactId&amp;gt;retrofit&amp;lt;/artifactId&amp;gt; 4 &amp;lt;version&amp;gt;2.1.0&amp;lt;/version&amp;gt; 5&amp;lt;/dependency&amp;gt; gradle 1 api &amp;#39;com.squareup.retrofit2:retrofit:2.1.0&amp;#39; github 个人意见 其实，最适合使用 retrofit 的是 rest 请求类的交互，如果具体的请求参数是以 url 区分业务逻辑，请求参数通过 json 进行的，那其实 retrofit 不太适用
俗话说，demo 是最好的学习 先来看看怎么定义业务逻辑
1public interface GitHubService { 2 @GET(&amp;#34;users/{user}/repos&amp;#34;) 3 Call&amp;lt;List&amp;lt;Repo&amp;gt;&amp;gt; listRepos(@Path(&amp;#34;user&amp;#34;) String user); 4} 这里的{user}是一个会在实际使用时会被动态改变的，会根据 String user 中的变量而改变
1public class RetrofitDemo { 2 private static OkHttpClient client; 3 4 static { 5 client = new OkHttpClient.Builder() 6 .addInterceptor(new HttpInterceptor()) 7 .
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
