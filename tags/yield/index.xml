<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yield on CaiJingLong</title>
    <link>https://kikt.top/tags/yield/</link>
    <description>Recent content in yield on CaiJingLong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sun, 03 Feb 2019 17:19:23 +0800</lastBuildDate><atom:link href="https://kikt.top/tags/yield/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>dart中的生成器函数</title>
      <link>https://kikt.top/posts/flutter/dart/generators/</link>
      <pubDate>Sun, 03 Feb 2019 17:19:23 +0800</pubDate>
      
      <guid>https://kikt.top/posts/flutter/dart/generators/</guid>
      <description>
        
          
            2019 年春节前最后一更了
在 dart 中有生成器函数的语法,在很多其他的语言中也有,比如 js c#
这个语法看上去和 async await 语法很像
使用的关键字是 async* sync* yield yield*
官方对于这个语法的说明可以参考这个连接
其实async await也是一种生成器语法
生成器语法就是你返回的类型通常情况下和 return 的类型可能不一致
比如你return 1,但是返回值上却需要写Future&amp;lt;int&amp;gt;
sync* 在 dart 中可以使用这个便利的生成一个迭代器
如下所示
这两种写法是一样的,但是第一个写法会简洁很多
1main(List&amp;lt;String&amp;gt; arguments) { 2 print(genList()); 3 print(genList2()); 4} 5 6Iterable&amp;lt;int&amp;gt; genList({int max = 10}) sync* { 7 var i = 0; 8 while (i &amp;lt; max) { 9 yield i; 10 i++; 11 } 12} 13 14Iterable&amp;lt;int&amp;gt; genList2({int max = 10}) { 15 var list = &amp;lt;int&amp;gt;[]; 16 var i = 0; 17 while (i &amp;lt; max) { 18 list.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
