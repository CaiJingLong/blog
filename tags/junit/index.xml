<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>junit on CaiJingLong</title>
    <link>https://kikt.top/tags/junit/</link>
    <description>Recent content in junit on CaiJingLong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Tue, 06 Dec 2016 10:45:55 +0800</lastBuildDate><atom:link href="https://kikt.top/tags/junit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AIDL 安卓进程间通信/跨应用通信</title>
      <link>https://kikt.top/posts/android/android-aidl/</link>
      <pubDate>Tue, 06 Dec 2016 10:45:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-aidl/</guid>
      <description>
        
          
            前言 最近出去面试找工作，被人问到 AIDL，我就回答这个东西我用过，也大概理解，Android 的进程间通信语言嘛
人家不置可否，那我能咋着呢，毕竟没深入研究过，也没办法，咱只能回来奋发图强了
写在前面 我以前就看过的一个博客，里面原理代码什么都有，写的水平肯定比我高
首先字面解释 A=Android IDL=Interface definition language 意译就是 android 接口定义语言，马丹，完全看不明白 算了，就是 Android 官方给我们定义出来跨进程，甚至跨应用通信用的
开发平台 Android Studio 2.2+Android 手机一部
新建工程 这个就不说了，跳过 就是新建工程后再建一个 module 也是 android app，功能后面再说
aidl 语法 这里请去看我写在前面，里面比较详细，或者自行 baidu/google，我也了解的不多
代码示例 最关键的地方到了 其实就是新建一个 aidl 文件
1// IMyAidlInterface.aidl 2package com.kikt.aidl; 3 4// Declare any non-default types here with import statements 5 6interface IMyAidlInterface { 7 8 void test(int sum,int sum2); 9} 接着 make project，生成下 java 代码 找到生成的代码看下 我靠 好复杂，还是渣格式，这里格式化一下：
          
          
        
      </description>
    </item>
    
    <item>
      <title>Android Studio 简单的JunitTest</title>
      <link>https://kikt.top/posts/android/android-junit/</link>
      <pubDate>Sat, 22 Oct 2016 10:45:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-junit/</guid>
      <description>
        
          
            最近使用 AndroidStudio 的时候想要使用单元测试 因为有一些数据需要 Activity 的支持， 从网上找了一些教程，但自己使用时感觉不理想，发现都是一些业务逻辑的类，很少有直接针对 Activity 的单元测试 所以想自己写一个简单的 demo
开发环境 Android Studio 2.2
步骤 首先新建工程 然后会自动生成 MainActivity
MainActivity 代码如下
1public class MainActivity extends AppCompatActivity { 2 3 // Used to load the &amp;#39;native-lib&amp;#39; library on application startup. 4 static { 5 System.loadLibrary(&amp;#34;kikt-camera&amp;#34;); 6 } 7 8 @Override 9 protected void onCreate(Bundle savedInstanceState) { 10 super.onCreate(savedInstanceState); 11 setContentView(R.layout.activity_main); 12 13 // Example of a call to a native method 14 TextView tv = (TextView) findViewById(R.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Android Studio 2.2 ndk开发环境 gradle配置</title>
      <link>https://kikt.top/posts/android/android-studio-2-2-ndk-and-gradle-config/</link>
      <pubDate>Fri, 21 Oct 2016 10:45:55 +0800</pubDate>
      
      <guid>https://kikt.top/posts/android/android-studio-2-2-ndk-and-gradle-config/</guid>
      <description>
        
          
            AndroidStudio2.2 中 对于 ndk/jni 建议使用 cmake 进行编译 而对于纯粹的 android 程序员来说，cmake 不是经常接触的方案，我在遇到 jni 相关时也遇到了一些问题，这里抛砖引玉吧
开发环境 Android SDK/NDK Android Studio 2.2 友情提示：更新请科学上网
准备工作 其实 demo 永远是最好的老师 我们直接自己创建一个 Project 好在 AS 对于对于 ndk 的支持越来越友好 选中 c++支持，这样创建出来的 gradle 文件就会自动创建相关的，有助于我们学习
自动生成的核心文件 build.gradle MainActivity.java native-lib.cpp CMakelists.txt
MainActivity.java MainActivity.java
1 System.loadLibrary(&amp;#34;native-lib&amp;#34;); //加载native-lib库 2 ... 3 public native String stringFromJNI();//指向cpp文件中的方法 左边有一个箭头，这个点击可以直接跳到 cpp 文件中的方法
gradle project 级别的和传统没有差别 看 module 级的
1apply plugin: &amp;#39;com.android.application&amp;#39; 2 3android { 4 ... 5 externalNativeBuild { 6 cmake { 7 cppFlags &amp;#34;&amp;#34; 8 } 9 } 10 } 11 .
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
