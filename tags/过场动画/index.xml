<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>过场动画 on CaiJingLong</title>
    <link>https://kikt.top/tags/%E8%BF%87%E5%9C%BA%E5%8A%A8%E7%94%BB/</link>
    <description>Recent content in 过场动画 on CaiJingLong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 24 Feb 2020 17:55:49 +0800</lastBuildDate><atom:link href="https://kikt.top/tags/%E8%BF%87%E5%9C%BA%E5%8A%A8%E7%94%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>flutter中的过场动画 PageTransitionsTheme</title>
      <link>https://kikt.top/posts/flutter/route-anim/</link>
      <pubDate>Mon, 24 Feb 2020 17:55:49 +0800</pubDate>
      
      <guid>https://kikt.top/posts/flutter/route-anim/</guid>
      <description>
        
          
            &lt;h2 id=&#34;过场动画&#34;&gt;过场动画&lt;/h2&gt;
&lt;p&gt;过场动画也就是切换路由时的动画&lt;/p&gt;
&lt;p&gt;这个东西有几种方案可以做&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;继承 &lt;code&gt;PageRoute&lt;/code&gt;来做, 复写 5 个抽象方法, 并抽象&lt;code&gt;buildTransitions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;继承已有的系统类, 比如 MaterialPageRoute 或者 CupertinoPageRoute&lt;/li&gt;
&lt;li&gt;一劳永逸的方案, 使用&lt;code&gt;PageTransitionsTheme&lt;/code&gt;类结合 MaterialApp 的 theme 的&lt;code&gt;pageTransitionsTheme&lt;/code&gt;属性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前两种目前网络上也有一些人做了分享, 但第三种好像很少有人使用, 我这里就来说一下&lt;code&gt;PageTransitionsTheme&lt;/code&gt;的用法&lt;/p&gt;
&lt;p&gt;这东西有如下的好处:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置一次, 你所有的&lt;code&gt;MaterialPageRoute&lt;/code&gt;都可以生效&lt;/li&gt;
&lt;li&gt;对于命名路由, 也就是&lt;code&gt;pushNamed&lt;/code&gt;体系的也有效&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;先分析下源码&#34;&gt;先分析下源码&lt;/h2&gt;
&lt;p&gt;为啥分析源码? 因为如果上来就用显得不高端&lt;/p&gt;
&lt;p&gt;先找一个大家都知道的切入点, 一般的过场动画都是用的 &lt;code&gt;Navigator.push&lt;/code&gt; 方法来实现的&lt;/p&gt;
&lt;p&gt;
&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://dev.azure.com/cjlspy/844861b8-ee45-48a3-b430-b974684baaaa/_apis/git/repositories/df66928f-89ec-4688-abf0-d9acdc6cc858/items?path=%2F1582545312689_4562.png&amp;amp;versionDescriptor%5BversionOptions%5D=0&amp;amp;versionDescriptor%5BversionType%5D=0&amp;amp;versionDescriptor%5Bversion%5D=master&amp;amp;resolveLfs=true&amp;amp;%24format=octetStream&amp;amp;api-version=5.0&#34; alt=&#34;image&#34;  crossorigin/&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;看看方法里的实现, 会发现很多常见的东西, 比如, 每一个 Route 都有自己的 OverlayEntry&lt;/p&gt;
&lt;p&gt;然后会有一个 install 方法&lt;/p&gt;
&lt;p&gt;
&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://dev.azure.com/cjlspy/844861b8-ee45-48a3-b430-b974684baaaa/_apis/git/repositories/df66928f-89ec-4688-abf0-d9acdc6cc858/items?path=%2F1582546358238_9811.png&amp;amp;versionDescriptor%5BversionOptions%5D=0&amp;amp;versionDescriptor%5BversionType%5D=0&amp;amp;versionDescriptor%5Bversion%5D=master&amp;amp;resolveLfs=true&amp;amp;%24format=octetStream&amp;amp;api-version=5.0&#34; alt=&#34;image&#34;  crossorigin/&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;而实际调用中, 这个 Overlay 会被插入到 Overlay 栈内, 从而在界面上显示&lt;/p&gt;
&lt;p&gt;
&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://dev.azure.com/cjlspy/844861b8-ee45-48a3-b430-b974684baaaa/_apis/git/repositories/df66928f-89ec-4688-abf0-d9acdc6cc858/items?path=%2F1582546648863_3942.png&amp;amp;versionDescriptor%5BversionOptions%5D=0&amp;amp;versionDescriptor%5BversionType%5D=0&amp;amp;versionDescriptor%5Bversion%5D=master&amp;amp;resolveLfs=true&amp;amp;%24format=octetStream&amp;amp;api-version=5.0&#34; alt=&#34;image&#34;  crossorigin/&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://dev.azure.com/cjlspy/844861b8-ee45-48a3-b430-b974684baaaa/_apis/git/repositories/df66928f-89ec-4688-abf0-d9acdc6cc858/items?path=%2F1582546671533_8570.png&amp;amp;versionDescriptor%5BversionOptions%5D=0&amp;amp;versionDescriptor%5BversionType%5D=0&amp;amp;versionDescriptor%5Bversion%5D=master&amp;amp;resolveLfs=true&amp;amp;%24format=octetStream&amp;amp;api-version=5.0&#34; alt=&#34;image&#34;  crossorigin/&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://dev.azure.com/cjlspy/844861b8-ee45-48a3-b430-b974684baaaa/_apis/git/repositories/df66928f-89ec-4688-abf0-d9acdc6cc858/items?path=%2F1582546738812_6401.png&amp;amp;versionDescriptor%5BversionOptions%5D=0&amp;amp;versionDescriptor%5BversionType%5D=0&amp;amp;versionDescriptor%5Bversion%5D=master&amp;amp;resolveLfs=true&amp;amp;%24format=octetStream&amp;amp;api-version=5.0&#34; alt=&#34;image&#34;  crossorigin/&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://dev.azure.com/cjlspy/844861b8-ee45-48a3-b430-b974684baaaa/_apis/git/repositories/df66928f-89ec-4688-abf0-d9acdc6cc858/items?path=%2F1582546749763_2588.png&amp;amp;versionDescriptor%5BversionOptions%5D=0&amp;amp;versionDescriptor%5BversionType%5D=0&amp;amp;versionDescriptor%5Bversion%5D=master&amp;amp;resolveLfs=true&amp;amp;%24format=octetStream&amp;amp;api-version=5.0&#34; alt=&#34;image&#34;  crossorigin/&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;经过这一串的调用, 就把 Navigator push 和 Route 关联到了一起, 那么 theme 是怎么和 Route 关联起来的呢, 我们进入 MaterialPageRoute 看一下&lt;/p&gt;
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
