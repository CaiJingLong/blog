<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>过场动画 on CaiJingLong</title>
    <link>https://kikt.top/tags/%E8%BF%87%E5%9C%BA%E5%8A%A8%E7%94%BB/</link>
    <description>Recent content in 过场动画 on CaiJingLong</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 24 Feb 2020 17:55:49 +0800</lastBuildDate><atom:link href="https://kikt.top/tags/%E8%BF%87%E5%9C%BA%E5%8A%A8%E7%94%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>flutter中的过场动画 PageTransitionsTheme</title>
      <link>https://kikt.top/post/flutter/route-anim/</link>
      <pubDate>Mon, 24 Feb 2020 17:55:49 +0800</pubDate>
      
      <guid>https://kikt.top/post/flutter/route-anim/</guid>
      <description>
        
          
            过场动画 过场动画也就是切换路由时的动画
这个东西有几种方案可以做
 继承 PageRoute来做, 复写 5 个抽象方法, 并抽象buildTransitions 继承已有的系统类, 比如 MaterialPageRoute 或者 CupertinoPageRoute 一劳永逸的方案, 使用PageTransitionsTheme类结合 MaterialApp 的 theme 的pageTransitionsTheme属性  前两种目前网络上也有一些人做了分享, 但第三种好像很少有人使用, 我这里就来说一下PageTransitionsTheme的用法
这东西有如下的好处:
 设置一次, 你所有的MaterialPageRoute都可以生效 对于命名路由, 也就是pushNamed体系的也有效  先分析下源码 为啥分析源码? 因为如果上来就用显得不高端
先找一个大家都知道的切入点, 一般的过场动画都是用的 Navigator.push 方法来实现的
 看看方法里的实现, 会发现很多常见的东西, 比如, 每一个 Route 都有自己的 OverlayEntry
然后会有一个 install 方法
 而实际调用中, 这个 Overlay 会被插入到 Overlay 栈内, 从而在界面上显示
    经过这一串的调用, 就把 Navigator push 和 Route 关联到了一起, 那么 theme 是怎么和 Route 关联起来的呢, 我们进入 MaterialPageRoute 看一下
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
