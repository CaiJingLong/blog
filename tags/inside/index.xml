<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Inside on CaiJingLong</title>
    <link>https://kikt.top/tags/inside/</link>
    <description>Recent content in Inside on CaiJingLong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sun, 11 Nov 2018 12:24:00 +0800</lastBuildDate><atom:link href="https://kikt.top/tags/inside/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【简单翻译】flutter的设计哲学（ inside flutter）</title>
      <link>https://kikt.top/posts/flutter/inside-flutter/</link>
      <pubDate>Sun, 11 Nov 2018 12:24:00 +0800</pubDate>
      
      <guid>https://kikt.top/posts/flutter/inside-flutter/</guid>
      <description>
        
          
            &lt;h1 id=&#34;简单翻译&#34;&gt;简单翻译&lt;/h1&gt;
&lt;p&gt;英文链接来自于
&lt;a href=&#34;https://flutter.io/docs/resources/inside-flutter&#34; &gt;flutter 官网&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;对应的版本为 11 月 11 日版本 连接为

&lt;/p&gt;
&lt;p&gt;后续如有改动,请以最新的英文版本为准,有翻译不准确的地方请参照英文版本自行理解&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;本文档描述了 Flutter 工具包的内部工作原理，使 Flutter 的 API 成为可能。因为 Flutter 小部件是使用积极的可组合性(aggressive composition)构建的，所以使用 Flutter 构建的用户界面具有大量小部件。&lt;/p&gt;
&lt;p&gt;为了支持这种工作量，Flutter 使用次线性算法来布局和构建小部件，这些数据结构使树形手术变得高效，并且具有许多常量因子优化。&lt;/p&gt;
&lt;p&gt;通过一些额外的细节，这种设计还使开发人员可以使用回调来轻松创建无限滚动列表，这些回调可以构建用户可见的小部件。&lt;/p&gt;
&lt;h2 id=&#34;积极的可组合性aggressive-composability&#34;&gt;积极的可组合性（Aggressive composability）&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Flutter 最独特的一个方面是其积极的可组合性。&lt;/p&gt;
&lt;p&gt;小部件是通过组合其他小部件构建的，这些小部件本身是由逐步更基本的小部件构建的。例如，Padding 是一个小部件而不是其他小部件的属性。因此，使用 Flutter 构建的用户界面由许多小部件组成。&lt;/p&gt;
&lt;p&gt;小部件构建递归在 RenderObjectWidgets 中触底，这些小部件在底层渲染树中创建节点。渲染树是一种数据结构，用于存储用户界面的几何图形，该几何图形在布局期间计算并在绘制和命中测试期间使用。大多数 Flutter 开发人员不直接创建对象，而是使用小部件操纵渲染树。&lt;/p&gt;
&lt;p&gt;为了在小部件层支持积极的可组合性，Flutter 在小部件和渲染树层使用了许多有效的算法和优化，这些将在以下小节中介绍。&lt;/p&gt;
&lt;h3 id=&#34;次线性布局&#34;&gt;次线性布局&lt;/h3&gt;
&lt;p&gt;使用大量小部件和渲染对象，良好性能的关键是高效的算法。最重要的是布局的性能，布局是确定渲染对象的几何（例如，大小和位置）的算法。其他一些工具包使用 O（N²）或更差的布局算法（例如，某些约束域中的定点迭代）。 Flutter 的目标是初始布局的线性性能，以及随后更新现有布局的常见情况下的次线性布局性能。通常，布局所花费的时间量应该比渲染对象的数量更慢。&lt;/p&gt;
&lt;p&gt;Flutter 每帧执行一个布局，布局算法一次完成。约束通过父对象向下传递，父对象在每个子对象上调用布局方法。子项递归地执行自己的布局，然后通过返回布局方法将几何返回到树中。重要的是，一旦渲染对象从其布局方法返回，该渲染对象将不再被访问，直到下一帧的布局。这种方法将可能单独的度量和布局传递组合成单个传递，因此，每个渲染对象在布局期间最多访问两次：一次在树下，一次在树上。&lt;/p&gt;
&lt;p&gt;Flutter 有这个通用协议的几个专业。最常见的专业是 RenderBox，它以二维笛卡尔坐标运算。在框布局中，约束是最小和最大宽度以及最小和最大高度。在布局期间，子项通过选择这些边界内的大小来确定其几何。孩子从布局返回后，父母决定孩子在父母坐标系中的位置。请注意，孩子的布局不能取决于孩子的位置，因为孩子的位置直到孩子从布局返回后才确定。因此，父母可以自由地重新定位孩子，而无需重新计算孩子的布局。&lt;/p&gt;
&lt;p&gt;更一般地说，在布局期间，从父节点传递到子节点的唯一信息是约束，并且从子节点流向父节点的唯一信息是几何体。这些不变量可以减少布局期间所需的工作量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果孩子没有将自己的布局标记为脏，则孩子可以立即从布局返回，切断步行，只要父母给孩子的约束与孩子在前一个布局中收到的约束相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每当父级调用子级的布局方法时，父级指示它是否使用从子级返回的大小信息。如果经常发生父级不使用大小信息，那么如果子级选择新大小，则父级不需要重新计算其布局，因为父级保证新大小将符合现有约束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;严格约束是指只能通过一个有效几何体来满足的约束。例如，如果最小和最大宽度彼此相等并且最小和最大高度彼此相等，则满足这些约束的唯一尺寸是具有该宽度和高度的尺寸。如果父级提供严格约束，则父级无需在子级重新计算其布局时重新计算其布局，即使父级在其布局中使用子级的大小，因为子级无法在没有父级的新约束的情况下更改大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;渲染对象可以声明它仅使用父级提供的约束来确定其几何。这样的声明通知框架该子渲染对象的父级在子级重新计算其布局时不需要重新计算其布局，即使约束不紧，即使父级的布局取决于子级的大小，因为子级无法更改大小没有来自其父级的新约束。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为这些优化的结果，当渲染对象树包含脏节点时，在布局期间仅访问那些节点以及它们周围的子树的有限部分。&lt;/p&gt;
&lt;h3 id=&#34;次线性小部件构建&#34;&gt;次线性小部件构建&lt;/h3&gt;
&lt;p&gt;与布局算法类似，Flutter 的小部件构建算法是次线性的。构建之后，小部件由元素树保存，元素树保留用户界面的逻辑结构。元素树是必要的，因为小部件本身是不可变的，这意味着（除其他外），它们不能记住它们与其他小部件的父或子关系。元素树还包含与有状态窗口小部件关联的状态对象。&lt;/p&gt;
&lt;p&gt;响应于用户输入（或其他刺激），元素可能变脏，例如，如果开发人员在关联的状态对象上调用 setState（）。框架保留一个脏元素列表，并在构建阶段直接跳转到它们，跳过干净的元素。在构建阶段，信息在元素树中单向流动，这意味着在构建阶段期间每个元素最多访问一次。清洁后，元素不会再次变脏，因为通过感应，它的所有祖先元素也都是干净的。&lt;/p&gt;
&lt;p&gt;因为窗口小部件是不可变的，所以如果元素没有将自身标记为脏，则元素可以立即从构建返回，如果父级使用相同的窗口小部件重建元素，则会切断步行。此外，元素只需要比较两个窗口小部件引用的对象标识，以确定新窗口小部件与旧窗口小部件相同。开发人员利用此优化来实现重投影模式，其中窗口小部件包括在其构建中存储为成员变量的预构建子窗口小部件。&lt;/p&gt;
&lt;p&gt;在构建期间，Flutter 还避免使用 InheritedWidgets 遍历父链。如果窗口小部件通常走他们的父链，例如确定当前的主题颜色，则构建阶段将在树的深度变为 O（N 2），由于积极的组合，这可能非常大。为了避免这些父行为，框架通过在每个元素上维护一个 InheritedWidgets 的哈希表来向下推送元素树中的信息。通常，许多元素将引用相同的哈希表，该哈希表仅在引入新的 InheritedWidget 的元素上更改。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
