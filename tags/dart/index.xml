<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dart on CaiJingLong</title>
    <link>https://kikt.top/tags/dart/</link>
    <description>Recent content in dart on CaiJingLong</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 18 Nov 2019 16:09:31 +0800</lastBuildDate><atom:link href="https://kikt.top/tags/dart/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>dart 2.6(一) 生成可执行二进制</title>
      <link>https://kikt.top/post/dart/2-6-exec/</link>
      <pubDate>Mon, 18 Nov 2019 16:09:31 +0800</pubDate>
      
      <guid>https://kikt.top/post/dart/2-6-exec/</guid>
      <description>
        
          
            什么叫可执行二进制 以前虽然看似也可以生成二进制执行文件, 类似 pub/flutter 命令, 但是那实际也是调用 dart 命令来完成的, 也就是说, 你必须具备 dart 环境才可以
比如以前的 c,后来的 go, 都可以编译成一个可执行文件, 比如./hello-world就可以运行, 然后在控制台输出结果
而在 dart 2.6 版本中, 这个东西变成了现实
如何做 1main(List&amp;lt;String&amp;gt; arguments) { 2print(&amp;#34;hello dart!&amp;#34;); 3} 使用$ dart2native bin/main.dart来完成编译过程, 然后会生成一个main.exe, 虽然看着是 exe, 但这个东西是一个当前系统下的可执行二进制文件
1./bin/main.exe 2hello dart! 嗯, 这东西目前还不支持交叉编译, 也就是 mac 只能生成 mac 的, windows 只能生成 windows 的, 但是应该有很多人请愿, 未来一定会有相关的支持
目前可以使用 github actions, 或者 docker 之类的东西来跨平台编译
好处 单文件的部署方便, 未来写工具也会很方便
劣势 不支持交叉编译
文件较大, 一个简单的 helloworld 就有 6.7mb 之大, 相对应的, c 可能只有几 k, go 默认情况下也不到 1m,经过优化也能接近 c 的大小
          
          
        
      </description>
    </item>
    
    <item>
      <title>在 flutter 上使用 c 代码 - (二) 无源码的项目</title>
      <link>https://kikt.top/post/flutter/ffi/2-first-party/</link>
      <pubDate>Mon, 04 Nov 2019 17:15:11 +0800</pubDate>
      
      <guid>https://kikt.top/post/flutter/ffi/2-first-party/</guid>
      <description>
        
          
            写在前面, 对于无源码的项目, 理论上必须有头文件,不然你不知道里面都定义了什么鬼东西.
本篇虽然是写无源码的项目, 但实际上还是会有源码部分, 只是通过 cmake,clang,xcodebuild,ndk 等工具编译成 so/framework 以供 android/ios 引入
生成动态库 整体的目录结构是这样的, 如果你只是要引入库, 可以跳过这步, 这步的主要做源码生成库的步骤
1$ tree -L 3 cpp-source 2tree -L 3 cpp-source 3cpp-source 4├── android 5│ ├── CMakeLists.txt 6│ ├── build_android.sh 7│ └── cmd 8│ └── android.sh 9├── ios 10│ ├── CMakeLists.txt 11│ ├── build_ios.sh 12│ ├── cmd 13│ │ └── ios_abi_build.sh 14│ └── ios.toolchain.cmake 15└── src 16├── some.cpp 17└── some.h src 为源码
some.cpp
1#include &amp;#34;some.h&amp;#34;2#include &amp;lt;stdint.
          
          
        
      </description>
    </item>
    
    <item>
      <title>在 flutter 上使用 c 代码 - (一) 有源码的项目</title>
      <link>https://kikt.top/post/flutter/ffi/1-first-party/</link>
      <pubDate>Mon, 04 Nov 2019 11:35:42 +0800</pubDate>
      
      <guid>https://kikt.top/post/flutter/ffi/1-first-party/</guid>
      <description>
        
          
            在 flutter 的 1.10.x 后的分支, dart:ffi 被并入 flutter, 现在 flutter 中也可以使用 ffi 了。
这东西是啥玩意呢, 就是让 dart 可以直接调用 c/c++ 代码等东西的库, FFI(foreign function interface)， 在这里。
但是在当前版本中, 这东西在官方说明中依然处于技术预览版, 就是可用, 但后续不保证 api 不变更。
开发环境 首先我是 mac 系统, windows 系统不保证脚本的可用和工具的可用, linux 的话可能一些必要工具需要使用自己平台的包管理工具, 并且涉及到 ios 部分, 必须使用 mac。
所有需要的工具包
 Xcode(或 XcodeBuild 命令行工具) brew clang cmake Android 工具链  Android SDK NDK Android Studio(可选) Gradle   Flutter 工具链  SDK 1.10.x+   vscode(可选, 这东西看你的情况,作为示例的话只要是文本编辑器即可, 我本人使用这个作为主要的文本编辑器)  这里说的是包含后续所有用到的东西, 并不仅仅是本文。 其中对于 flutter 开发者可能需要单独安装的应该只有 NDK 和 Cmake, 这两个东西是包含在 android sdk 下的, 可以使用 android studio 下载, 也可以单独下载
          
          
        
      </description>
    </item>
    
    <item>
      <title>dart 大文件读取</title>
      <link>https://kikt.top/post/dart/file/read/</link>
      <pubDate>Fri, 20 Sep 2019 15:15:51 +0800</pubDate>
      
      <guid>https://kikt.top/post/dart/file/read/</guid>
      <description>
        
          
            好久没水文章了, 强行水一篇
dart 中不可避免会出现文件读取的情况, 甚至是很大的文件, 比如 200M 的文件
如果一次性读入内存,虽然也行得通, 但是如果在 flutter 中开启个 200M 大小的字节数组, 一不小心可能就 crash 了, 这时候就需要使用大文件读取的方案
             异步读取 核心方法:
1file.openRead(); 这个方法可以指定开始和结束的坐标, 并开启一个 stream
stream 回调信息是 List&amp;lt;int&amp;gt;,单次最大读取 65536 个字节
示例 1class FileUtils { 2File file; 34FileUtils(this.file); 56// 读取文件的某个范围返回 7 Future&amp;lt;List&amp;lt;int&amp;gt;&amp;gt; getRange(int start, int end) async { 8if (file == null || !file.existsSync()) { 9throw FileNotExistsError(); 10} 11if (start &amp;lt; 0) { 12throw RangeError.
          
          
        
      </description>
    </item>
    
    <item>
      <title>dart 2.3的新东西</title>
      <link>https://kikt.top/post/flutter/dart/2-3-new/</link>
      <pubDate>Thu, 09 May 2019 16:04:45 +0800</pubDate>
      
      <guid>https://kikt.top/post/flutter/dart/2-3-new/</guid>
      <description>
        
          
            在最近两天 dart 更新到了 2.3 的稳定版
增加了一些语法糖,对于开发 flutter 来说会更加的友好
可以查看 当然,本篇不是翻译,只是对于新语法做一个简单的尝试
...语法 这个语法很眼熟,在 js 中有类似的语法,其他语言可能也有
什么意思呢
看下面的代码
1main(List&amp;lt;String&amp;gt; arguments) { 2list3Point(); 3} 45void list3Point() { 6var list1 = &amp;lt;int&amp;gt;[1, 2, 3, 4]; 78var list2 = &amp;lt;int&amp;gt;[ 90, 10...list1, 116, 12]; 1314print(list2); // [0, 1, 2, 3, 4, 6] 15} 这里可能会提示需要更新 sdk 约束,可能这个特性是 2.2.2 加入的,更新约束后 yaml 文件被修改
1environment:2sdk:&amp;#39;&amp;gt;=2.2.2 &amp;lt;3.0.0&amp;#39;旧版本的实现需要以下几个步骤
1void list3PointOld() { 2var list1 = &amp;lt;int&amp;gt;[1, 2, 3, 4]; 3var list2 = &amp;lt;int&amp;gt;[0]; 4list2.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Pub Global 创建命令行应用程序</title>
      <link>https://kikt.top/post/flutter/dart/bin/pub-global/</link>
      <pubDate>Mon, 25 Feb 2019 13:53:52 +0800</pubDate>
      
      <guid>https://kikt.top/post/flutter/dart/bin/pub-global/</guid>
      <description>
        
          
            前言 如果你接触过npm/yarn 应该知道,有一些包可以全局使用,就是安装后可以直接用,比如vue-cli这样的应用,应该是用node开发的
在dart中也可以实现类似的功能, 使用就可以了,在连接中有完整的说明 也有这样的应用程序可以直接使用
我在这里简单的实战一下,实现一个简单的cli应用程序
这个程序没什么多余的功能,就简单的实现输入敲击unix获取时间戳
建立工程前的准备 将dart,pub加入PATH环境变量 需要在环境变量中添加几个东西,添加环境变量的方式自己搜索一下
一个是dart/bin的目录,你需要在命令行中让dart命令可用
1➜ ~ dart --version 2Dart VM version: 2.1.0 (Tue Nov 13 18:22:02 2018 +0100) on &amp;#34;macos_x64&amp;#34; 相对应的dart/bin目录下还会有其他的一些工具,包含了pub,这个工具也是会用到的
1➜ bin pub --version 2Pub 2.1.0 安装dart工程脚手架 
$ pub global activate stagehand
将pub-cache/bin目录加入PATH环境变量 这个目录通常是~/.pub-cache/bin目录
验证stagehand可用 1➜ bin stagehand 2Stagehand will generate the given application type into the current directory. 34usage: stagehand &amp;lt;generator-name&amp;gt; 5--[no-]analytics Opt out of anonymous usage and crash reporting.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
