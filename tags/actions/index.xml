<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Actions on CaiJingLong</title>
    <link>https://kikt.top/tags/actions/</link>
    <description>Recent content in Actions on CaiJingLong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 07 Sep 2020 16:49:35 +0800</lastBuildDate><atom:link href="https://kikt.top/tags/actions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Github action 的开发到发布</title>
      <link>https://kikt.top/posts/github/actions/create/</link>
      <pubDate>Mon, 07 Sep 2020 16:49:35 +0800</pubDate>
      
      <guid>https://kikt.top/posts/github/actions/create/</guid>
      <description>
        
          
            &lt;p&gt;Github action 这东西是好东西, 但我看了一下, 很多朋友都是停留在用的阶段, 其实偶尔也要换换口味, 自己开发一个 action, 而不是仅仅是用&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;github actions 是 github 推出的一个工作流的工具, 目的是为了帮助我们在某些情况下主动触发仓库的动作, 从而完成 单元测试/CI/CD, 甚至包括 release,发布包管理工具等等&lt;/p&gt;
&lt;p&gt;官方关于 actions 有关的一些仓库都在这里: 
&lt;a href=&#34;https://github.com/actions&#34; &gt;https://github.com/actions&lt;/a&gt;
 , 
&lt;a href=&#34;https://docs.github.com/en/actions&#34; &gt;文档在这里&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;github 的主语言是 js, 当然也肯定也支持 ts&lt;/p&gt;
&lt;p&gt;另外如果对于速度需求并不高的朋友, 也可以使用 docker, 但因为 docker 安装的过程会根据镜像大小有一定的耗时, 所以不一定适用于所有朋友&lt;/p&gt;
&lt;p&gt;如果，你对于本文章不是很感兴趣，可以参考
&lt;a href=&#34;https://docs.github.com/en/actions/creating-actions&#34; &gt;创建 action 的文档&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;新建&#34;&gt;新建&lt;/h2&gt;
&lt;p&gt;因为我对于 js 比较不喜欢, 所以使用 ts(虽然也不是很感冒, 但是会好一点)&lt;/p&gt;
&lt;p&gt;进入这个
&lt;a href=&#34;https://github.com/actions/typescript-action&#34; &gt;仓库&lt;/a&gt;
, 然后使用
&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://cdn.jsdelivr.net/gh/kikt-blog/blog-2@t1/uPic/1599469136.png&#34; alt=&#34;image-20200907165856148&#34;  crossorigin/&gt;
&lt;/p&gt;
按钮, 完成初始化的过程.&lt;/p&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/kikt-blog/blog-2@t1/uPic/1599469205.png&#34; alt=&#34;image-20200907170005503&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;这里我们创建一个仓库, 这个仓库的目的是自动给 issue 打上 label&lt;/p&gt;
&lt;h3 id=&#34;初始化后的仓库&#34;&gt;初始化后的仓库&lt;/h3&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/kikt-blog/blog-2@t1/uPic/1599469267.png&#34; alt=&#34;image-20200907170107892&#34; style=&#34;zoom:33%;&#34; /&gt;
&lt;p&gt;简单介绍一下这个仓库, 有一些文件和注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;action.yml 是 action 本身的配置文件(别的项目实际就是读取这个东西来确定入口在哪里), 包括参数的配置都是这东西&lt;/li&gt;
&lt;li&gt;一个标准的 npm 项目, 指定了入口&lt;/li&gt;
&lt;li&gt;src 内是主要的 ts 代码&lt;/li&gt;
&lt;li&gt;ts 代码需要被编译为 js 才能使用&lt;/li&gt;
&lt;li&gt;dist 内就是编译产物, git 的版本控制需要包含 dist 下的所有文件, 不然运行的时候会是老代码&lt;/li&gt;
&lt;li&gt;项目本身自带 action, 主要是 CI 这个项目的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;入门&#34;&gt;入门&lt;/h2&gt;
&lt;h3 id=&#34;开发环境&#34;&gt;开发环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vscode, 我这里是使用 vscode 进行编辑, 你请根据自己的情况&lt;/li&gt;
&lt;li&gt;npm(node), 我是使用 nvm 管理的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你的 node 大于 12.0, 理论上不用动&lt;/p&gt;
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
